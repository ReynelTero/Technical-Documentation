** start of undefined **

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="./styles.css">
</head>
<body>
    <nav class="navbar" id="navbar">
        <header>JS Documentation</header>
        <div><a class="nav-link" href="#Introduction">Introduction</a></div>
        <div><a class="nav-link" href="#What_you_should_already_know">What you should already know</a></div>
        <div><a class="nav-link" href="#Variables">Variables</a></div>
        <div><a class="nav-link" href="#Declaring_variables">Declaring variables</a></div>
        <div><a class="nav-link" href="#Variable_scope">Variable scope</a></div>
        <div><a class="nav-link" href="#Reference">Reference</a></div>
    </nav>


<main id="main-doc">
    <section class="main-section" id="Introduction"> 
        <header>Introduction</header>
        <article><p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p>
        <p>JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p>
        <ul>
        <li>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li>
        <li>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li>
        </ul>
        </article>
    </section>
    <section class="main-section" id="What_you_should_already_know">
        <header>What you should already know</header>
        <article>
        <p>This guide assumes you have the following basic background:</p>
        <ul>
        <li>A general understanding of the Internet and the World Wide Web (WWW).</li>
        <li>Good working knowledge of HyperText Markup Language (HTML).</li>
        <li>Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about JavaScript.</li>
        </ul>
        </article>
    </section>
    <section class="main-section" id="Variables">
        <header>Variables</header>
        <article>
        <p>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
        <p>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).</p>
        <p>You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers. You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, and _name.</p>
        </article>
    </section>
    <section class="main-section" id="Declaring_variables">
        <header>Declaring variables</header>
        <article>
        <p>You can declare a variable in three ways:</p>
        <p>With the keyword var. For example,</p>
        <code>var x = 42.</code>
        <p>This syntax can be used to declare both local and global variables.</p>
        <p>By simply assigning it a value. For example,</p>
        <code>x = 42.</code>
        <p>This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this variant.</p>
        <p>With the keyword let. For example,</p>
        <code>let y = 13.</code>
        <p>This syntax can be used to declare a block scope local variable. See Variable scope below.</p>
        </article>
    </section>
    <section class="main-section" id="Variable_scope">
        <header>Variable scope</header>
        <article>
        <p>When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.</p>
        <p>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement.</p>
        <code>if (true) { var x = 5; } console.log(x); // 5</code>
        <p>This behavior changes, when using the let declaration introduced in ECMAScript 2015.</p>
        <code>if (true) { let y = 5; } console.log(y); // ReferenceError: y is
not defined</code>
</article>
    </section>
    <section class="main-section" id="Reference">
        <header>Reference</header>
        <article>
            <ul>
        <li>All the documentation in this page is taken from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">MDN</a></li>
        </ul>
        </article>
    </section>
</main>
</body>
</html>

** end of undefined **

** start of undefined **

html {
  min-width: 290px;
  color: #436f64;
  background-color: #F2F2F2;
  font-family: sans-serif;
  line-height: 1.5;
  padding-left: 30px;
}


#navbar {
    position: fixed;
    min-width: 290px;
    top: 0px;
    left: 0px;
    width: 250px;
    height: 100%;
    border-right: solid;
    border-color: #035AA6;
    background-color: #436f64;
}

header {
    color: #F2F2F2;
    margin: 20px;
    text-align: center;
    font-family: 'Lora', serif;
    font-size: 1.8em;
}

#main-doc header {
    color: #035AA6;
    text-align: left;
    font-family: 'Lora', serif;
    margin-top: 25px;
    margin-left: 30px;
}
    
#navbar ul {
    height: 85%;
    overflow-y: auto;
    overflow-x: hidden;
}

#navbar li {
    color: #035AA6;
    border: 1.5px solid;
    border-bottom-width: 0px;
    border-right-width: 0px;
    padding: 1em;
    padding-left: 35px;
    list-style: none;
    position: relative;
    left: -50px;
    width: 100%; 
}

#navbar li:hover {
    background: #0339A6;
}
    
#navbar a {
    color: #F2F2F2;
    text-decoration: none;
    cursor: pointer;
    font-size: 1.2em;
} 

#navbar a:hover {
    color: #82b1ff;
}
    
#main-doc {
    position: absolute;
    margin-left: 260px;
    padding: 20px;
    margin-bottom: 60px;
}
    
section article {
    color: #436f64;
    margin-left: 40px;
    font-size: 1em;
}
    
section li {
    margin: 15px 0px 0px 20px;
}

code {
    display: block;
    text-align: left;
    white-space: pre;
    position: relative;
    line-height: 2;
    background-color: #e4e4e4;
    color: #395f56;
    padding: 15px;
    margin: 5px;
    border-radius: 10px;
}

/* For mobile phones */
@media only screen and (max-width: 815px) {
    #navbar ul {
        height: 257px;
    }

    #navbar {
        position: absolute;
        top: 0;
        padding: 0;
        margin: 0;
        width: 100%;
        max-height: 280px;
        border: none;
        z-index: 1;
        border-bottom: 1px solid;
        padding-left: 5px
    }

    #main-doc {
        position: relative;
        margin-left: 0px;
        margin-top: 300px;
    }

    #main-doc section {
        padding-top: 1px; 
    }

    #main-doc header {
        margin-left: 2px;
    }

    section article {
        margin-left: 10px;
    }
}


** end of undefined **

